{"ast":null,"code":"import { toNestError as e } from \"@hookform/resolvers\";\nimport { appendErrors as t } from \"react-hook-form\";\n\nvar r = function (r, o, n) {\n  return void 0 === o && (o = {\n    abortEarly: !1\n  }), void 0 === n && (n = {}), function (s, a, c) {\n    try {\n      return Promise.resolve(function (e, t) {\n        try {\n          var c = (o.context && \"development\" === process.env.NODE_ENV && console.warn(\"You should not used the yup options context. Please, use the 'useForm' context object instead\"), Promise.resolve(r[\"sync\" === n.mode ? \"validateSync\" : \"validate\"](s, Object.assign({}, o, {\n            context: a\n          }))).then(function (e) {\n            return {\n              values: e,\n              errors: {}\n            };\n          }));\n        } catch (e) {\n          return t(e);\n        }\n\n        return c && c.then ? c.then(void 0, t) : c;\n      }(0, function (r) {\n        return {\n          values: {},\n          errors: e((o = r, n = \"all\" === c.criteriaMode, o.inner.reduce(function (e, r) {\n            if (e[r.path] || (e[r.path] = {\n              message: r.message,\n              type: r.type\n            }), n) {\n              var o = e[r.path].types,\n                  s = o && o[r.type];\n              e[r.path] = t(r.path, n, e, r.type, s ? [].concat(s, r.message) : r.message);\n            }\n\n            return e;\n          }, {})), c.fields)\n        };\n        var o, n;\n      }));\n    } catch (e) {\n      return Promise.reject(e);\n    }\n  };\n};\n\nexport { r as yupResolver };","map":null,"metadata":{},"sourceType":"module"}